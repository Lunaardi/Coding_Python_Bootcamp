Aula 7.0

	Trabalhando com Listas em Python
		
		Criando Listas
		
			- Listas em Python podem armazenar de maneira sequencial qualquer tipo de objeto.
			- Podemos criar listas utilizando o contrutor "list", a função "range" ou colocando valores separados por vírgula dentro de colchetes.
			- Listas são objetos mutáveis, portanto podemos alterar seus valores após a criação.
			
				Exemplo:
				
					frutas = ["laranja", "maca", "uva"]
					
					frutas = [] # declarando uma lista vazia
					
					letras = list("python")
					
					numeros = list(range(10)
					
					carro = ["Ferrari", "F8", 4200000, 2020, 2900, "São Paulo", True]
		
		Acesso Direto

			- A lista é uma sequência, portanto podemos acessar seus dados utilizando índices.
			- Contamos o índice de determinada sequência a partir do zero.
			
				Exemplo:
				
					frutas = ["maca", "laranja", "uva", "pera"] 
					frutas[0] # maça
					frutas[2] # uva
					
			Índices Negativos
			
				- Sequências suportam indexação negativa.
				-  A contagem começa em -1.
				
					Exemplo:
						
						frutas = ["maca", "laranja", "uva", "pera"] 
						frutas[-1] # pera
						frutas[-3] # laranja
						
			Listas Aninhadas
				
				- Listas podem armazenar todos os tipos de objetos Python, portanto podemos ter listas que armazenam outras listas.
				- Com isso podemos criar estruturas bidimensionais (matriz, tabelas), e acessar informando os índices de linha e coluna.
				
					Exemplo:
						
						matriz = [
							[1, "a", 2],
							["b", 3, 4],
							[6, 5, "c"],
						]
						
						matriz[0]  		# [1, "a", 2]
						matriz[0][0]	# 1
						matriz[0][-1]	# 2
						matriz[-1][-1]	# "c"
			
			Fatiamento
				
				- Além de acessar elementos diretamente, podemos extrair um conjunto de valores de uma sequência.
				- Para isso basta passar o índice inicial e/ou final para acessar o conjunto.
				- Podemos ainda informar quantas posições o cursor deve "pular" no acesso.
				
					Exemplo:
					
						lista = ["p","y","t","h","o","n"]
						
						lista[2:]		# ["t","h","o","n"]
						lista[:2]		# ["p","y"]
						lista[1:3]		# ["y", "t"]
						lista[0:3:2]	# ["p", "t"]
						lista[::]		# ["p","y","t","h","o","n"]
						lista[::-1]		# ["n","o","h","t","y","p"]
						
			Iterar listas
			
				- A forma mais comum para percorrer os dados de uma lista é utilizando o comando "for".
				
					Exemplo:
						
						carros = ["gol", "celta", "palio"]
						
						for carro in carros
			 				print(carro)
							
			Função Enumerate
			
				- Às vezes é necessário saber qual o índice do objeto dentro do laço "for". 
				- Para isso podemos usar a função "enumerate".
				
					Exemplo:
						
						carros = ["gol", "celta", "palio"]
						
						for carro, carros in enumerate(carros):
							print(f"{carro}: {carros}")
							
			Compreensão de listas
			
				- A compreensão de lista oferece uma sintaxe mais curta quando você deseja:
				- Criar uma nova lista com base nos valores de uma lista existente (filtro) ou gerar uma nova lista aplicando alguma modificação nos elementos de uma lista existente.
					
					Exemplo 1: Filtro versão 1
					
						numeros = [1, 30, 21, 2, 9, 65, 34]
						pares = []
						
						for numero in numeros:
							if numero % 2 == 0:
								pares.append(numero)
						
						print(pares)
					
					Exemplo 2: Filtro versão 2
					
						numeros = [1, 30, 21, 2, 9, 65, 34]
						pares = [numero for numero in numeros if numero % 2 == 0] # ("retorno" for "interação" if "atribuição do filtro")
						
					Exemplo 3: Modificando valores versão 1
					
						numeros = [1, 30, 21, 2, 9, 65, 34]
						quadrado = []
						
						for numero in numeros:
								quadrado.append(numero ** 2)
								
						print(quadrado)
								
					Exemplo 4: Modificando valores versão 2
					
						numeros = [1, 30, 21, 2, 9, 65, 34]
						quadrado = [numero ** 2 for numero in numeros]
						
						print(quadrado)

	Métodos de Classe List
	
		Append
		
			- Adiciona um objeto a uma lista.
		
				Exemplo:
				
					lista = []
					
					lista.append(1)
					lista.append("Python")
					lista.append([40, 30, 20])
					
					print(lista)
					>>>[1, "Python", [40, 30, 20]]
		
		Clear
		
			- É utilizado quando eu desejo limpar a minha lista.
			
				Exemplo:
				
					lista = [1, "Python", [40, 30, 20]]
					
					print(lista)
					>>> [1, "Python", [40, 30, 20]]
					
					lista.clear()
					
					print(lista)
					>>> []
		
		Copy
		
			
			
				Exemplo:
				
					lista = [1, "Python", [40, 30, 20]]
					
					l2 = lista.copy()
					
					print(lista)
					>>> [1, "Python", [40, 30, 20]]
					
		Count

			- Ele conta quantas vezes um objeto (numero, string, etc...) aparece dentro da sua lista.
			
				Exemplo:
				
					cores = ["vermelho", "azul", "verde", "azul"]
					
					cores.count("vermelho") 
					>>> 1
					
					cores.count("azul") 
					>>> 2
					
					cores.count("verde") 
					>>> 1
			
		Extend
		
			-  Ele serve para juntar 2 listas, porém ele não remove os objetos duplicados.(insere na lista original os objetos da lista desejada)
			
				Exemplo:
				
					linguagens = ["python", "js" "c"]
					
					print(linguagens) 
					>>> ["python", "js" "c"]
					
					linguagens.extend(["java", "csharp"])
					
					print(linguagens)
					>>> ["python", "js", "c", "java", "csharp"]
					
		Index
		
			- Diferente do Acesso direto onde passo a cordenada e ele me traz o objeto, no index eu passo o objeto e ele me traz a coordenada.
			- Se limita a trazer so a primeira ocorrencia em que o objeto aparece
			
				Exemplo:
					
					linguagens = ["python", "js", "c", "java", "csharp"]
					
					linguagens.index("java")
					>>> 3
					
					linguagens.index("python")
					>>> 0
		
		Pop
		
			- Imagine como uma pilha de pratos, onde o primeiro prato adicionado na mesa fica em baixo dos demais.
			- O ultimo prato ficaria por cima de todos, quando fossemos selecionar pegariamos (remover) esse ultimo objeto da lista, ou ultimo elemento adicionado a lista.
			- Simplificando remove o ultimo objeto adicionado a lista.
			
				Exemplo:
					
					linguagens = ["python", "js", "c", "java", "csharp"]
					
					linguagens.pop()	>>> csharp
					linguagens.pop()	>>> java
					linguagens.pop()	>>> c
					linguagens.pop(0)	>>> python
					
		Remove 
		
			- É uma segunda forma de retirar elementos/objetos de uma lista.
			- Ao contrario de pop onde passamos o indice do objeto, neste caso removemos o objetos em sí.
			
				Exemplo:
				
					linguagens = ["python", "js", "c", "java", "csharp"]
					
					linguagens.remove("c")
					
					print(linguagens)
					>>> ["python", "js", "java", "csharp"]
		
		Reverse
		
			- Realiza o espelhamento das ordens dos objetos na lista
			
				Exemplo:
				
					linguagens = ["python", "js", "c", "java", "csharp"]
					
					linguagens. reverse()
					
					print(linguagens)
					>>> ["csharp", "java", "c", "js", "python"]
					
		Sort
		
			- Irá ordenar a nossa lista
				Obs1: lembrando o lambda é uma função anonima.
				Obs2: o len(x) tira(verifica , lê, olha) o tamanho de uma string, ou seja quantos caracteres ela tem.
			
				Exemplo:
				
					linguagens = ["python", "js", "c", "java", "csharp"]
					linguagens.sort()
					>>> [["c", "csharp", "java", "js", "python"]]
					
					linguagens = ["python", "js", "c", "java", "csharp"]
					linguagens.sort(reverse=True)
					>>> [["python", "js", "java", "csharp", "c"]]
					
					linguagens = ["python", "js", "c", "java", "csharp"]
					linguagens.sort(key=lambda x: len(x)) #ordenando por tamanho de palavras ou seja do menor para o maior ()
					>>> [["c", "js", "java", "python", "csharp"]]
					
					linguagens = ["python", "js", "c", "java", "csharp"]
					linguagens.sort(key=lambda x: len(x), reverse=True) #ordenando por tamanho de palavras ou seja do maior para o menor
					>>> [["python", "csharp", "java", "js", "c"]]
					
		Len
			
			- Tira o tamanho da lista, ou seja verifica a quantidade de elementos ou objetos que a lista possui.
			
				Exemplo:
				
					linguagens = ["python", "js", "c", "java", "csharp"]
					
					len(linguagens) 
					>>> 5
					
		Sorted
		
			- Ordena interaveis, basicamente igual o "sort" a diferença é que ele é uma função.
				
				Exemplo:
				
					linguagens = ["python", "js", "c", "java", "csharp"]
					
					sorted(linguagens, key=lambda x: len(x))
					>>> ["c", "js", "java", "python", "csharp"]
					
					sorted(linguagens, key=lambda x: len(x), reverse=True)
					>>> ["python", "csharp", "java", "js", "c"]
