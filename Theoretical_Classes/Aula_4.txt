Aula 4.0
	
	Estruturas Condicionais e de Repetição
	
		Identação e Blocos de Comando
			
			A Estética
			
				- Identar código é uma forma de manter o código fonte mais legível e manutenível.
				- Mas em Python ela exerce um segundo papel, através da identação o interpretador consegue determinar onde um bloco de comando inicia e onde ele termina.
				
			Bloco de comando
			
				- As linguagens  de programação costumam utilizar caracteres ou palavras para terminar o início e fim do bloco.
				- Em Java e C por exemplo, utilizamos chaves:
				
					Exemplo 1: Bloco em Java
					
						void sacar(double valor){ // início do bloco do método
						
							if (this.saldo >= valor) { // início do bloco do if
							
								this.saldo -= valor;
								
							} // fim do bloco do if
							
						} // fim do bloco do método
				
					Exemplo 2: Bloco em Java sem formatar ( isto não funciona como melhores praticas em Python)
					
						void sacar(double valor){ // início do bloco do método
						if (this.saldo >= valor) { // início do bloco do if
						this.saldo -= valor;
						} // fim do bloco do if
						} // fim do bloco do método
						
			Utilizando Espaços	

				- Existe uma convenção em Python, que define as boas práticas para escrita de código na linguagem.
				- Neste documento é indicado utilizar 4 espaços em branco por nível de indentação, ou seja, a cada novo bloco adicionamos 4 novos espaços em branco
						
					Exemplo: Bloco em Python
						
						def sacar(self, valor: float) None: # início do bloco do método
						
							if self.saldo >= valor: # início do bloco do if
							
								self.saldo -= valor
								
							# fim do bloco do if
						
						# fim do bloco do método
						
		Estruturas Condicionais
			
			- A estrutura condicional permite o desvio de fluxo de controle, quando determinadas expressões lógicas são atendidas.
			
				IF
				
					- Para criar uma estrutura simples, composta por um único desvio, podemos utilizar reservada if.
					- O comando irá testar a expressão lógica, e em caso de retorno verdadeiro as ações presentes no bloco de código do if serão executadas.
					
						Exemplo:
						
							saldo = 2000.0
							saque = float(input("informe o valor do saque: "))
							
								if saldo >= saque:
									print(Realizando Saque!")
									
								if saldo < saque:
									print(Saldo Insulficiente!")
					
				IF / ELSE
					
					- Para criar uma estrutura condicional com dois desvios, podemos utilizar as palavras reservadas if e else.
					- Como sabemos se a expressão lógica testada no if for verdadeira, então o bloco de código do if será executado.
					
						Exemplo:
						
							saldo = 2000.0
							saque = float(input("informe o valor do saque: "))
							
								if saldo >= saque:
									print(Realizando Saque!")
									
								else: 
									print(Saldo Insulficiente!")
									
				IF / ELIF / ELSE
				
					- Em alguns cenários queremos mais de dois desvios, para isso podemos utilizar a palavra reservada elif.
					- O elif é composto por uma nova expressão lógica, que será testada e caso retorne verdadeiro o bloco de código do elif será executado.
					- Não existe um número máximo de elifs que podemos utilizar, porém evite criar grandes estruturas condicionais, pois elas aumenam a complexidade do código.
					
						Exemplo:
						
							opcao = int(input("Informe uma opção: [1] Sacar \n[2] Extrato: "))
							
								if opcao == 1:
									valor = float(input("Informe a quantia para o saque: "))
									# ...
								elif opcao == 2:
									print("Exibindo o Extrato ...")
								else:
									sys.exit("Opção Invalida")
									
			IF Aninhado
			
				- Podemos criar estruturas condicionais aninhadas, para isso basta adicionar estruturas if/elif/else dentro do bloco de código de estruturas if/elif/else.
				
					Exemplo:
					
						if conta_normal:
							if saldo >= saque:cons
								print("Saque realizado com sucesso!")
							elif saque <= (saldo + cheque_especial):
								print("Saque realizado com uso do cheque especial!")
						elif conta_universitaria:
							if saldo >= saque:
								print("Saque realizado com sucesso!")
							else:
								print("Saldo insuficiente!")
			
			IF Ternário
				
				- O if ternário permite escrever uma condição em uma única linha.
				- Ele é composto por três partes, a primeira parte é o retorno caso a expressão retorne verdadeiro, a segunda parte é a expressão lógica e a terceira parte é o retorno caso a expressão não seja atendida.
				
					Exemplo:
						
						status = "Suceso" if saldo >= saque else "falha"
						
						print(f{status} ao realizar o saque!)
		
		Estruturas de Repetição
		
			- São estruturas utilizadas para repetir um trecho de código um determinado número de vezes.
			- Esse número pode ser conhecido previamente ou determinado através de uma expressão lógica.
			
				Exemplo Sem Repetição:
					
					# Receba um número do teclado e exiba os 2 números seguintes
					
					a = int(input("Informe o número inteiro: ")
						print(a)
					
					a += 1
						print(a)
					
					a += 1
						print(a)
			
				Exemplo Com Repetição:
					
					# Receba um número do teclado e exiba os 2 números seguintes
					
					a = int(input("Informe o número inteiro: ")
						print(a)
					
					repita 2 vezes:
						a += 1
						print(a)
			
			Camando FOR
				
				- O comando for é usado para percorrer um objeto iterável.faz sentido usar for quando sabemos o número exato de vezes que nosso bloco de código deve ser executado, ou quando queremos percorrer um objeto iterável.
				
					Exemplo: For
						
						texto = input("Informe o texto: ")
						VOGAIS = "AEIOU"
						
						for letra in texto:
							if letra.upper() in VOGAIS:
								print(letra, end="")
						
						print() # adiciona um quebra de linha
					
					Exemplo: For / Else
						
						texto = input("Informe o texto: ")
						VOGAIS = "AEIOU"
						
						for letra in texto:
							if letra.upper() in VOGAIS:
								print(letra, end="")
						
						else:
						print() # adiciona um quebra de linha 
						
			Função Range
			
				- Range é uma função built-in do Python, ela é usada para produzir uma sequência de números interiso a partir de um ínicio(inclusivo) para um fim (excluivo).
				- Se usarmos range (i,j) será produzido:
					i, i+1, i+2, i+3, ..., j-1
				- Ela recebe 3 argumentos: stop(obrigatório), start(opcional) e step opcional.
				
					Exemplo 1: Range / range com for
					
						# range (stop) -> range object
						# rang(start, stop[, step]) -> range object
						
						list(range(4))
						>>> [0, 1, 2, 3]
						
						for numero in range(0, 11)
							print(numero, end=" ")
						>>> 0 1 2 3 4 5 6 7 8 9 10
						
					Exemplo 2: Exibindo a tabuada do 5 (range / for)
						
						for numero in range(0, 51, 5):
							print(numero, end=" ")
						>>> 0 5 10 15 20 25 30 35 40 45 50
						
			Comando While

				- O comando while é usado para repetir um bloco de código várias vezes.
				- Faz sentido usar while quando não sabemos o número exato de vezes que nosso bloco de código de ser executado.
				
					Exemplo: while
						 
						opcao = -1
						
						while opcao != 0:
							opcao = int(input("[1] Sacar \n[2] Extrato \n[0] Sair \n: ")
							
							if opcao == 1:
								print("Realizando o Saque ...")
							elif opcao == 2:
								print("eXIBINDO O EXTRATO ...")
				
					Exemplo: while / else
						 
						opcao = -1
						
						while opcao != 0:
							opcao = int(input("[1] Sacar \n[2] Extrato \n[0] Sair \n: ")
							
							if opcao == 1:
								print("Realizando o Saque ...")
							elif opcao == 2:
								print("eXIBINDO O EXTRATO ...")
						else:
							print("Obrigado por usar nosso sistema bancário, até logo!")
